credito
amostra = sample(2,1000,replace=T, prob=c(0.7,0.3))
creditotreino = credito[amostra==1,]
creditoteste = credito[amostra==2,]
arvore = rpart(class ~ ., data=creditotreino,  method="class")
print(arvore)
#Executar com Ctrl+ Shift + Enter
plot(arvore)
text(arvore, use.n=TRUE, all=TRUE, cex=.8)
teste = predict(arvore,newdata=creditoteste)
head(teste)
cred = cbind(creditoteste,teste)
cred
cred['Result'] = ifelse(cred$bad>=0.5,"bad","good")
cred
confusao = table(cred$class,cred$Result)
confusao
taxaacerto = (confusao[1] + confusao[4]) / sum(confusao)
taxaacerto
#install.packages("e1071")
library(e1071)
credito = read.csv("Credit.csv")
head(credito)
dim(credito)
credito$class = as.factor(credito$class)
amostra = sample(2,1000,replace=T, prob=c(0.7,0.3))
amostra
creditotreino = credito[amostra==1,]
creditoteste = credito[amostra==2,]
dim(creditotreino)
dim(creditoteste)
modelo <- naiveBayes(class ~., creditotreino)
modelo
predicao <- predict(modelo,creditoteste)
predicao
confusao = table(creditoteste$class,predicao)
confusao
taxaacerto = (confusao[1] + confusao[4]) / sum(confusao)
taxaerro = (confusao[2] + confusao[3]) / sum(confusao)
taxaacerto
taxaerro
#install.packages("e1071")
#install.packages("randomForest")
library(e1071)
library(randomForest)
credito = read.csv("Credit.csv")
credito$class = as.factor(credito$class)
set.seed(234)
amostra = sample(2,1000,replace=T, prob=c(0.7,0.3))
creditotreino = credito[amostra==1,]
creditoteste = credito[amostra==2,]
modelo = svm(class ~., creditotreino)
predicao = predict(modelo,creditoteste)
confusao = table(creditoteste$class,predicao)
taxaacerto = (confusao[1] + confusao[4]) / sum(confusao)
taxaacerto
importancia  = randomForest(class ~ ., data = creditotreino)
col = importance(importancia)
col
varImpPlot(importancia)
modelo = svm(class ~ credit_amount + age + duration + checking_status ,creditotreino)
predicao = predict(modelo,creditoteste)
confusao = table(creditoteste$class,predicao)
taxaacerto = (confusao[1] + confusao[4]) / sum(confusao)
taxaacerto
#install.packages("class")
library(class)
head(iris)
summary(iris)
amostra = sample(2,150,replace=T, prob=c(0.7,0.3))
iristreino = iris[amostra==1,]
iristeste = iris[amostra==2,]
dim(iristreino)
dim(iristeste)
previsao = knn(iristreino[,1:4],iristeste[,1:4],iristreino[,5],k=3)
previsao
tabela = table(iristeste[,5],previsao)
tabela
(tabela[1] + tabela[5] + tabela[9]) / sum(tabela)
#install.packages('randomForest')
library(randomForest)
credito = read.csv('credit.csv')
#transforma classe em fator
credito$class = as.factor(credito$class)
head(credito)
amostra = sample(2,1000,replace=T, prob=c(0.7,0.3))
creditotreino = credito[amostra==1,]
creditoteste = credito[amostra==2,]
floresta = randomForest(class ~ .,data=creditotreino, ntree=100,importance=T)
floresta
plot(floresta)
previsao = predict(floresta,creditoteste)
previsao
confusao = table(previsao,creditoteste$class)
confusao
taxaacerto = (confusao[1] + confusao[4]) / sum(confusao)
taxaacerto
#install.packages('mltools')
#install.packages('data.table')
library(mltools)
library(data.table)
Titanic
tit = as.data.frame(Titanic)
tit
labenc = data.matrix(tit[,1:3])
labenc
hotenco  = one_hot(as.data.table( tit[,1:3]))
hotenco
iris
iris_padr =  scale(iris[,1:4])
iris_padr
normaliza = function(x){
return((x-min(x))/(max(x)-min(x)))
}
iris_norm = normaliza(iris[,1:4])
iris_norm
#Executar com ctrl + shift + Enter
boxplot(iris[,1:4],main="Dados Originais")
boxplot(iris_padr, main="Padronizados")
boxplot(iris_norm, main="Normalizados")
#install.packages("factoextra")
library(factoextra)
install.packages("factoextra", dependencies = T)
library(factoextra)
iris
cluster = kmeans(iris[1:4],centers=3)
cluster
table(iris$Species,cluster$cluster)
plot(iris$Sepal.Length, iris$Sepal.Width,col=cluster$cluster, pch=20, main="iris")
plot(iris[,1:4],col=cluster$cluster, main="Iris")
g2 = fviz_cluster(cluster, data=iris[1:4], ellipse.type = "convex", ggtheme = theme_bw(),
main="Cluster ")
plot(g2)
iris2 = iris
iris2['grupos'] = cluster$cluster
iris2
#write.csv(iris2,"iri2.csv")
#install.packages("factoextra")
#install.packages("e1071")
#install.packages("RColorBrewer")
library(factoextra)
library(e1071)
library(RColorBrewer)
cluster = cmeans(iris[,1:4], centers=3)
cluster$membership
heatmap(cluster$membership, Colv = NA, Rowv = NA, col =  brewer.pal(n = 9, name = "YlOrRd"))
table(iris$Species, cluster$cluster)
g = fviz_cluster(list(data = iris[,1:4], cluster=cluster$cluster), ellipse.type = "norm", ggtheme = theme_bw(),
main="Cluster")
plot(g)
#install.packages("cluster")
#install.packages("factoextra")
library(cluster)
library(factoextra)
cluster = pam(iris[,1:4],k=3)
cluster
plot(cluster)
table(iris$Species,cluster$clustering)
g = fviz_cluster(list(data = iris[,1:4], cluster=cluster$cluster), ellipse.type = "norm", ggtheme = theme_bw(),
main="Cluster")
plot(g)
#install.packages("gridExtra", dependencies=T)
library(factoextra)
hc = hcut(iris[,-5], k = 3, hc_method = "complete", stand=T)
hc
plot(hc)
g1 =   fviz_dend(hc, show_labels = FALSE, rect = TRUE, ggtheme = theme_bw(), main="Cluster Hierárquico")
plot(g1)
g2 = fviz_cluster(hc, ellipse.type = "norm", ggtheme = theme_bw(),
main="Cluster Hierárquico")
plot(g2)
#Executar com ctrl + shift + enter
plot(g1)
plot(g2)
#install.packages("arules")
#install.packages("arulesViz")
library(arules)
library(arulesViz)
transacoes = read.transactions("transacoes.txt",format="basket",sep=",")
transacoes
inspect(transacoes)
image(transacoes)
regras = apriori(transacoes, parameter= list(supp=0.5, conf=0.5, minlen=2))
regras
summary(regras)
inspect(regras)
plot(regras, method="graph", control=list(type="items"))
plot(regras, method="matrix", control=list(type="items"))
#install.packages("arules")
#install.packages("arulesViz")
library(arules)
library("arulesViz")
transacoes <-read.transactions("transacoes.txt",format="basket",sep=",")
image(transacoes)
regras = eclat(transacoes, parameter = list(minlen=2))
inspect(regras)
plot(regras, method="graph", control=list(type="items"))
#install.packages("neuralnet")
#install.packages('mltools')
#install.packages('data.table')
#install.packages("caret", dependencies=T)
library(neuralnet)
#install.packages("neuralnet")
#install.packages('mltools')
#install.packages('data.table')
#install.packages("caret", dependencies=T)
library(neuralnet)
library(mltools)
library(data.table)
library(caret)
iris2 =  scale(iris[,1:4])
iris2 = as.data.frame(iris2)
#Adiciona a classe
iris2$Species = iris$Species
iris2
set.seed(1234)
particao = createDataPartition(1:dim(iris2)[1],p=.7)
iristreino = iris2[particao$Resample1,]
iristeste = iris2[- particao$Resample1,]
dim(iristreino)
dim(iristeste)
#Juntamos os atributos com a classe para não perde-los
iristreino = cbind(iristreino[,1:4],one_hot(as.data.table( iristreino[,5])))
iristreino
modelo = neuralnet( V1_setosa  + V1_versicolor  +  V1_virginica  ~ Sepal.Length + Sepal.Width +  Petal.Length + Petal.Width , iristreino, hidden=c(5,4))
print(modelo)
plot(modelo)
teste = compute(modelo,iristeste[,1:4])
teste$net.result
resultado = as.data.frame(teste$net.result)
resultado
names(resultado)[1] <- 'setosa'
names(resultado)[2] <- 'versicolor'
names(resultado)[3] <- 'virginica'
resultado
resultado$class = colnames(resultado[,1:3])[max.col(resultado[,1:3], ties.method = 'first')]
resultado
confusao = table(resultado$class,iristeste$Species)
confusao
sum(diag(confusao) * 100 / sum(confusao))
#install.packages("h2o")
library(h2o)
#uso interno
options(warn=-1)
digitos <- read.csv(gzfile("test.csv.gz"), header=F)
install.packages("h2o", dependencies = T)
library(h2o)
#uso interno
options(warn=-1)
digitos <- read.csv(gzfile("test.csv.gz"), header=F)
#uso interno
options(warn=-1)
digitos <- read.csv(gzfile("test.csv.gz"), header=F)
#uso interno
options(warn=-1)
digitos <- read.csv(gzfile("test.csv.gz"), header=F)
dim(digitos)
head(digitos)
install.packages("h2o", dependencies = T)
library(h2o)
#uso interno
options(warn=-1)
digitos <- read.csv(gzfile("test.csv.gz"), header=F)
dim(digitos)
head(digitos)
dig1 = t(matrix(unlist(digitos[20,-785]), nrow = 28, byrow = F))
dig1 = t(apply(dig, 2, rev))
dig1 = t(matrix(unlist(digitos[20,-785]), nrow = 28, byrow = F))
dig1 = t(apply(dig, 2, rev))
dig1
digitos[20,785]
dig2 = t(matrix(unlist(digitos[2,-785]), nrow = 28, byrow = F))
dig2 = t(apply(dig2, 2, rev))
dig1 = t(matrix(unlist(digitos[20,-785]), nrow = 28, byrow = F))
dig1 = t(apply(dig1, 2, rev))
dig1
dig1 = t(matrix(unlist(digitos[20,-785]), nrow = 28, byrow = F))
dig1 = t(apply(dig1, 2, rev))
dig1
digitos[20,785]
dig2 = t(matrix(unlist(digitos[2,-785]), nrow = 28, byrow = F))
dig2 = t(apply(dig2, 2, rev))
dig3 = t(matrix(unlist(digitos[4,-785]), nrow = 28, byrow = F))
dig3 = t(apply(dig3, 2, rev))
dig4 = t(matrix(unlist(digitos[5,-785]), nrow = 28, byrow = F))
dig4 = t(apply(dig4, 2, rev))
#Executar com ctrl + shift + enter
image(dig1, col = grey.colors(255))
image(dig2,col=grey.colors(255))
image(dig3,col=grey.colors(255))
image(dig4,col=grey.colors(255))
h2o.init()
treino <- h2o.importFile('train.csv.gz')
teste <- h2o.importFile('test.csv.gz')
dim(treino)
head(treino)
colnames(treino)
#transforma a classe em fator
treino[,785] <- as.factor(treino[,785])
teste[,785] <- as.factor(teste[,785])
modelo <- h2o.deeplearning(x = colnames(treino[,1:784]),  y = "C785",  training_frame = treino,  validation_frame = teste,  distribution = "AUTO",  activation = "RectifierWithDropout",  hidden = c(64,64,64),  sparse = TRUE, epochs = 20)
plot(modelo)
h2o.performance(modelo)
treino[20,785]
pred <- h2o.predict(modelo, newdata = treino[20,1:784])
pred$predict
#install.packages('randomForest',dependencies=T)
library(randomForest)
#carrega os dados de exemplo
soja = read.csv('soybean.csv', stringsAsFactors = T)
soja
dim(soja)
#classes
unique(soja$class)
#gera dois conjuntos de dados aleatórios, para teste e treino
#com 70 e 30% das instâncias, aproximadamente
amostra = sample(2,683,replace=T, prob=c(0.7,0.3))
sojatreino = soja[amostra==1,]
sojateste = soja[amostra==2,]
#constrói o modelo usando dados de treino
floresta = randomForest(class ~ .,data=sojatreino, ntree=100,proximity=T)
floresta
#testa o modelo fazendo previsão com dados de teste
previsao = predict(floresta,sojateste)
previsao
#matriz de confusao
floresta$confusion
#Precisão
1- mean(floresta$confusion[,'class.error'])
#install.packages("igraph")
library(igraph)
grafo1 = graph(edges=c(1,2,3,4))
plot(grafo1)
grafo2 = graph(edges=c(1,2,2,3,3,4,4,1))
plot(grafo2)
grafo2 = graph(edges=c(1,2,2,3,3,4,4,1,1,4,4,3,3,2,2,1))
plot(grafo2)
grafo3 = graph(edges=c(1,2,2,3,3,4,4,1,1,1))
plot(grafo3)
grafo8 = graph_from_literal(1-+2,2-+3,3++4,4+-1)
plot(grafo8)
grafo8 = graph_from_literal(1-2,2-3,3-4,4-1)
plot(grafo8)
grafo8 = graph_from_literal(1-2-3-4-1,5)
plot(grafo8)
grafo8
grafo2 = graph(edges=c(1,2,2,3,3,4,4,1))
plot(grafo2)
grafo2
grafo3 = graph(edges=c(1,2,2,3,3,4,4,1),directed=F )
plot(grafo3)
grafo3
grafo4 = graph(edges=c(1,2,2,3,3,4,4,1),directed=F, n=10 )
plot(grafo4)
grafo5 <- graph(edges= c("A", "B", "B", "C", "C", "D","D", "E","E","A","A","C","C","B"))
plot(grafo5)
grafo6 <- graph(edges= c("A", "B", "B", "C", "C", "D","D", "E","E","A","A","C","C","B"), isolates=c("F","G"))
plot(grafo6)
#matriz adjacente
grafo6[]
#linha 1
grafo6[1,]
#coluna 1
grafo6[,2]
#nomes dos vértices
V(grafo6)$name
grafo7 <- graph(edges= c("Fernando", "Pedro", "José", "Antônio", "Fernando", "José","Fernando", "Antônio"))
plot(grafo7)
#pesos aos vértices como atributo
V(grafo7)$Peso = c(40,30,30,25)
#ler atributos, temos name e peso. Nome é padrão
vertex_attr(grafo7)
#atributos para arestas
E(grafo7)$TipoAmizade = c("Amigo","Inimigo","Inimigo","Amigo")
#mostra todos
edge_attr(grafo7)
#mostra atributo pelo nome
edge_attr(grafo7)$TipoAmizade
vertex_attr(grafo7)$Peso
#weight é atributo padrão
E(grafo7)$weight = c(1,2,1,3)
grafo7
#Tipo do grafo, agora temos os 4 simbolos preenchidos
V(grafo7)$type ="Humanos"
grafo7
#install.packages("igraph")
library(igraph)
grafo7 <- graph(edges= c("Fernando", "Pedro", "José", "Antônio", "Fernando", "José","Fernando", "Antônio"))
V(grafo7)$Peso = c(40,30,30,25)
E(grafo7)$TipoAmizade = c("Amigo","Inimigo","Inimigo","Amigo")
E(grafo7)$weight = c(1,2,1,3)
V(grafo7)$type ="Humanos"
#tamanho do vértice de acordo com o peso
plot(grafo7, vertex.size=vertex_attr(grafo7)$Peso)
#tamanho da areasta de acordo com o peso
plot(grafo7, vertex.size=vertex_attr(grafo7)$Peso, edge.width=edge_attr(grafo7)$weight)
#cores aos vértices em um atributo
vertex_attr(grafo7)$Cor = c("Blue", "Red", "Yellow", "Green")
#plot com cores a partir do atributo
plot(grafo7, vertex.size=vertex_attr(grafo7)$Peso, edge.width=edge_attr(grafo7)$weight, vertex.color= vertex_attr(grafo7)$Cor)
#curvado, titulo e frame
plot(grafo7, vertex.size=vertex_attr(grafo7)$Peso, edge.width=edge_attr(grafo7)$weight, vertex.color= vertex_attr(grafo7)$Cor, edge.curved=0.4, frame=TRUE, main="Grafo")
#vertice retângulo
plot(grafo7, vertex.size=vertex_attr(grafo7)$Peso, edge.width=edge_attr(grafo7)$weight, vertex.color= vertex_attr(grafo7)$Cor, edge.curved=0.4, frame=TRUE, main="Grafo", vertex.shape="square")
#grafo de relacionamentos
grafo8 = read_graph("Grafo.graphml", format = c("graphml"))
tkplot(grafo8)
#install.packages("igraph")
library(igraph)
#carregamos um grafo de relacionamtos 53 vertices e 179 arestas
grafo8 = read_graph("Grafo.graphml", format = c("graphml"))
#53 vertices e 179 arestas
grafo8
plot(grafo8)
#grau de entrada e saída
degree(grafo8, mode="all")
#entrada
degree(grafo8, mode="in")
#saída
degree(grafo8, mode="out")
#colocando o grau no tamanho do vértice
grau  =  degree(grafo8, mode="in")
plot(grafo8, vertex.size=grau)
#diametro (maior distância entre diferentes vértices)
diameter(grafo8, directed=T)
diameter(grafo8, directed=F)
#vértices que formam o diametro
get_diameter(grafo8, directed=T)
get_diameter(grafo8, directed=F)
#vizinhança, zero incluio o proprio vertice, mode all não considera a direção
neighborhood(grafo8, 0, mode=c("all"))
#densidade do grafo
edge_density(grafo8)
#teste de isomorfismo
grafo9 = grafo8
isomorphic(grafo8,grafo9)
#install.packages("igraph")
library(igraph)
dist = graph(edges=c("A","C","A","B","B","E","B","F","C","D","G","H","D","H","E","H","F","G"),directed=TRUE)
plot(dist)
#pesos nas arestas que vão representar distâncias
E(dist)$weight = c(2,1,2,1,2,1,1,3,1)
plot(dist, edge.label = E(dist)$weight)
tkplot(dist, edge.label = E(dist)$weight, vertex.color="white")
#calcula a distância mais curta entre dois vertices (calcula mas não mostra caminho)
distances(dist,V(dist)$name=="A",V(dist)$name=="H")
#verifica no grafo
plot(dist, edge.label = E(dist)$weight)
#busca o caminho mais curto
#output lista de vertices ou arestas, both retorna os dois
caminho = shortest_paths(dist,V(dist)$name=="A",V(dist)$name=="H", output=c("both"))
caminho$vpath
#conferindo
plot(dist, edge.label = E(dist)$weight)
#percorre os vértices
for(i in 1:length(V(dist)))
{ #se estiver na lista do caminho mais curto pinta de verde, se não cinza
V(dist)$color[i] <- ifelse(i  %in% as.vector(unlist(caminho$vpath))
,"green","gray")
}
for(i in 1:length(E(dist)))
{  #se estiver na lista do caminho mais curto pinta de verde, se não cinza
E(dist)$color[i] <- ifelse(i  %in% as.vector(unlist(caminho$epath))
, "green","gray")
}
plot(dist, edge.label = E(dist)$weight)
#install.packages("igraph")
library(igraph)
grafo8 = read_graph("Grafo.graphml", format = c("graphml"))
grafo8 = as.undirected(grafo8)
#detecta comunidades
comun = cluster_edge_betweenness(grafo8)
#visualiza
comun
#cada vértice para qual comunidade pertecen
comun$membership
#impressão usando cor para comunidade
plot(grafo8, vertex.color = comun$membership)
dist = graph(edges=c("A","C","A","B","B","E","B","F","C","D","G","H","D","H","E","H","F","G"),directed=TRUE)
comun = cluster_edge_betweenness(dist)
comun
comun$membership
plot(dist, vertex.color = comun$membership, edge.color="gray")
#min é número minimo de membros
cli = cliques(as.undirected(grafo8), min=4)
length(cli)
cli
install.packages("igraph", dependencies = T)
install.packages("igraphdata", dependencies = T)
#install.packages("igraph", dependencies = T)
#install.packages("igraphdata", dependencies = T)
library(igraph)
library(igraphdata)
#install.packages("igraph", dependencies = T)
install.packages("igraphdata", dependencies = T)
#install.packages("igraph", dependencies = T)
#install.packages("igraphdata", dependencies = T)
library(igraph)
library(igraphdata)
data(Koenigsberg)
Koenigsberg
plot(Koenigsberg)
#graus impares, não é um grafo euleriano
degree(Koenigsberg, mode="all")
data(kite)
degree(kite, mode="all")
plot(kite)
data(UKfaculty)
UKfaculty
plot(UKfaculty)
comun=cluster_edge_betweenness(UKfaculty, directed = F)
plot(comun,UKfaculty)
